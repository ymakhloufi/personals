option_settings:
  - namespace: aws:elasticbeanstalk:application:environment
    option_name: LE_SSL_DOMAIN
    value: placeholder
  - namespace: aws:elasticbeanstalk:application:environment
    option_name: LE_EMAIL
    value: placeholder
  - namespace: aws:elasticbeanstalk:application:environment
    option_name: LE_INSTALL_SSL_ON_DEPLOY
    value: false

Resources:
  icmpSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: {"Fn::GetAtt": ["AWSEBSecurityGroup", "GroupId"]}
      IpProtocol: icmp
      ToPort: 0
      FromPort: 8
      CidrIp: 0.0.0.0/0

  sslSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: {"Fn::GetAtt": ["AWSEBSecurityGroup", "GroupId"]}
      IpProtocol: tcp
      ToPort: 443
      FromPort: 443
      CidrIp: 0.0.0.0/0

files:
  "/etc/httpd/conf.d/ssl.conf.template":
    mode: "000755"
    owner: root
    group: root
    content: |
      LoadModule ssl_module modules/mod_ssl.so
      Listen 443

      # https://goo.gl/FuW7T6
      # "This directive ccan only be used in the global server context because the PRNG is a global facility"
      # Make sure SSL entropy source is non-blocking
      SSLRandomSeed startup file:/dev/urandom 512
      SSLRandomSeed connect file:/dev/urandom 512

      <VirtualHost *:443>
          SSLEngine               on
          SSLCertificateFile      /etc/letsencrypt/live/{DOMAIN}/cert.pem
          SSLCertificateKeyFile   /etc/letsencrypt/live/{DOMAIN}/privkey.pem
          SSLCertificateChainFile /etc/letsencrypt/live/{DOMAIN}/fullchain.pem
          SSLCipherSuite          EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH
          SSLProtocol             All -SSLv2 -SSLv3
          SSLHonorCipherOrder     On
          SSLSessionTickets       Off

          Header always set Strict-Transport-Security "max-age=63072000; includeSubdomains; preload"
          Header always set X-Frame-Options DENY
          Header always set X-Content-Type-Options nosniff
      </VirtualHost>

  "/opt/elasticbeanstalk/hooks/appdeploy/post/letsencrypt_install.sh":
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/usr/bin/env bash
      # Bash script to install lets encrypt SSL certificate as a POST HOOK
      # For use with Single instance PHP Elastic Beanstalk
      set -e
      set -x

      # Loadvars
      . /opt/elasticbeanstalk/support/envvars

      # Install if no SSL certificate installed or SSL install on deploy is true
      if [[ ("$LE_INSTALL_SSL_ON_DEPLOY" = true) || (! -e /etc/letsencrypt/live/$LE_SSL_DOMAIN/cert.pem)]] ; then
          # Install mod_ssl
          sudo yum -y install mod24_ssl

          # Install json query
          sudo yum -y install jq

          # Assign value to DOCUMENT_ROOT
          DOCUMENT_ROOT=$(sudo /opt/elasticbeanstalk/bin/get-config optionsettings | jq '."aws:elasticbeanstalk:container:php:phpini"."document_root"' -r)

          # if multiple domains are in $LE_SSL_DOMAIN (e.g. example.com -d www.example.com) we use the first one
          PRIMARY_DOMAIN=$(echo $LE_SSL_DOMAIN | awk '{sub(/ .*/,x)}1')

          # Wait until domain is resolving to ec2 instance (maximum 2 minutes - fail if it takes longer)
          echo "Pinging $PRIMARY_DOMAIN until online..."
          SECONDS=0
          while ! ping -c 1 -W 10 -n $PRIMARY_DOMAIN &> /dev/null
          do
              SECONDS=$[$SECONDS +10]
              if [ $SECONDS -gt 180 ]
              then
                  echo "$SECONDS seconds timeout waiting to ping, lets exit";
                  exit 1;
              fi
          done
          echo "Pinging $PRIMARY_DOMAIN successful"

          # Install certbot
          sudo mkdir -p /certbot
          cd /certbot || exit
          wget https://dl.eff.org/certbot-auto;chmod a+x certbot-auto

          # Create certificate and authenticate
          sudo ./certbot-auto certonly -d "$LE_SSL_DOMAIN" --agree-tos --email "$LE_EMAIL" --webroot --webroot-path /var/app/current"$DOCUMENT_ROOT" --debug --non-interactive --renew-by-default
      fi

      # replace placeholder with actual domain in the ssl.conf.template
      sudo sed -i -e "s/{DOMAIN}/$PRIMARY_DOMAIN/g" /etc/httpd/conf.d/ssl.conf.template

      # Overwrite ssl.conf if it doesn't exist or if it has the wrong content (only if cert fetching worked)
      if ! cmp -s /etc/httpd/conf.d/ssl.conf /etc/httpd/conf.d/ssl.conf.template && test -e /etc/letsencrypt/live/$PRIMARY_DOMAIN/cert.pem ; then
          # rename ssl.conf.template to ssl.conf (possibly overwrite)
          sudo mv /etc/httpd/conf.d/ssl.conf.template /etc/httpd/conf.d/ssl.conf
      fi

      # Restart Apache, no matter what
      sudo service httpd graceful

  "/etc/cron.daily/letsencrypt":
    mode: "000755"
    owner: root
    group: root
    content: |
      #! /bin/bash

      # cronjob doesn't run if target-dir of log file doesn't exist
      mkdir -p /var/log/httpd/cron
      /certbot/certbot-auto renew >> /var/log/httpd/cron/letsencrypt_renewal.log 2>&1
      service httpd graceful

commands:
  rm_old_cron:
    command: "rm *.bak"
    cwd: "/etc/cron.daily"
    ignoreErrors: true
